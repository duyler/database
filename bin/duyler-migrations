#!/usr/bin/env php
<?php

declare(strict_types=1);

use Doctrine\Migrations\Configuration\Connection\ExistingConnection;
use Doctrine\Migrations\Configuration\Migration\ConfigurationArray;
use Doctrine\Migrations\DependencyFactory;
use Doctrine\Migrations\Tools\Console\Command;
use Doctrine\ORM\EntityManagerInterface;
use Duyler\Database\DatabaseConfigInterface;
use Duyler\EventBus\Build\Action;
use Duyler\EventBus\Action\Context\ActionContext;
use Duyler\Builder\Builder;
use Symfony\Component\Console\Application;

(function () {
    $possibleFiles = [__DIR__.'/../../autoload.php', __DIR__.'/../autoload.php', __DIR__.'/vendor/autoload.php'];
    $file = null;
    foreach ($possibleFiles as $possibleFile) {
        if (file_exists($possibleFile)) {
            $file = $possibleFile;

            break;
        }
    }

    if (null === $file) {
        throw new RuntimeException('Unable to locate autoload.php file.');
    }

    require_once $file;
})();

$builder = new Builder();
$builder->loadPackages();
$builder->doAction(
    new Action(
        id: 'StartMigrations',
        handler: function (ActionContext $context) {
            /** @var EntityManagerInterface $em */
            $em = $context->call(fn (EntityManagerInterface $em) => $em);
            /** @var DatabaseConfigInterface $databaseConfig */
            $databaseConfig = $context->call(fn (DatabaseConfigInterface $databaseConfig) => $databaseConfig);
            $config = [
                'table_storage' => [
                    'table_name' => 'doctrine_migration_versions',
                    'version_column_name' => 'version',
                    'version_column_length' => 191,
                    'executed_at_column_name' => 'executed_at',
                    'execution_time_column_name' => 'execution_time',
                ],

                'migrations_paths' => $databaseConfig->getMigrationsPaths(),

                'all_or_nothing' => true,
                'transactional' => true,
                'check_database_platform' => true,
                'organize_migrations' => 'none',
                'connection' => null,
                'em' => null,
            ];

            $dependencyFactory = DependencyFactory::fromConnection(
                new ConfigurationArray($config),
                new ExistingConnection($em->getConnection()),
            );

            $cli = new Application('Doctrine Migrations');
            $cli->setCatchExceptions(true);

            $cli->addCommands([
                new Command\DumpSchemaCommand($dependencyFactory),
                new Command\ExecuteCommand($dependencyFactory),
                new Command\GenerateCommand($dependencyFactory),
                new Command\LatestCommand($dependencyFactory),
                new Command\ListCommand($dependencyFactory),
                new Command\MigrateCommand($dependencyFactory),
                new Command\RollupCommand($dependencyFactory),
                new Command\StatusCommand($dependencyFactory),
                new Command\SyncMetadataCommand($dependencyFactory),
                new Command\VersionCommand($dependencyFactory),
            ]);

            $cli->run();
        }
    )
);

$bus = $builder->build();

$bus->run();
